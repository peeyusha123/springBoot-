var rfeReportType = [];
var carrierAgreementReportType = [];
var callSignFrequency = [];
var uploadedCallSigns = [];
var uploadedReportTypes = [];
var rfeReportTypeVal = [];
var cellularCallSigns = [];
var uploadedDocumnetsFor850Callsigns = [];
var structureType = '';
var rfdsModule = {
	dom: {
		parent: $(".rfds-Details"),
		body: $("#rfdsAccordionPanel"),
		taskName: 'RFDS',
		projectId: $("#site-project-id").val(),
		siteInfoId: $("#site-info-id").val(),
		siteProjectsId: $("#site-project-id").val(),
		raveValidation: false,
		validate850: true
	},
	constructor: {
		ajax: new commonAjax(),
		mandateESDocs: false,
		esStatus: ""
	},
	milestoneData: {},

	postProcess: function() {
		this.dom.body = $("#rfdsAccordionPanel");
		this.dom.body.find(".common_task_anchor_click").off('click').on('click', $.proxy(projectPageModule.onCommonClick, projectPageModule));

		grant7dayRule(this.dom.body);
		editTaskModule.postProcess();
		forecastProjectModule.getProjTrackerForecastDates($('#RFDS'));
		this.searchAllRaveTracker();
		projectPageModule.getProjNationalFields("RFDS", (nationalFieldResponse) => {
			projectPageModule.dom.selectedContentBody = this.dom.body;
			var projectId = $("#site-project-id").val();
			var data = JSON.parse($("#RFDS").attr("data-json"));
			enableMilestoneComponent('RFDS', data.milestoneStatus);
			var projAdditionalInfo = getProjectDetails();
			basicProjectInfo(projectId, projAdditionalInfo);
			this.getStructureInfo();
			getComments(projectId);
			$.each(data.tasks, (i, task) => {
				webComponentStatusActions(task, this.dom.body, this.dom.taskName);
			});
			getOptFields(projectId, "RFDS", (optFieldResponse) => {
				if (optFieldResponse && Object.keys(optFieldResponse).length && optFieldResponse.RFDS && optFieldResponse.RFDS.task && optFieldResponse.RFDS.task.length) {
					optFieldResponse['RFDS'].task.forEach((taskDetails) => {
						if (taskDetails && Object.keys(taskDetails).length && taskDetails.workStepName != this.dom.taskName) {
							$.when(createOptFields(taskDetails, this.dom.body, taskDetails.workStepName, this.dom.taskName)).done(basicProjectInfo(projectId, projAdditionalInfo));
						} else {
							basicProjectInfo(projectId, projAdditionalInfo);
						}
					});
				}
			});
			displayFieldsData($("#RFDS"), nationalFieldResponse);
		});

		this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));
		this.dom.body.find("#doc-report-type-list").off('change').on('change', $.proxy(this.changeDocReportTypeList, this));
		this.dom.body.find("#callsign-list-EXTENSION_AGREEMENT").off('change').on('change', $.proxy(this.changeCallsignListExtenstionAgreement, this));
		this.dom.body.find(".carrier-agreements-radio").off('click').on('click', $.proxy(this.clickCarrierAgreementsRadio, this));
		this.dom.body.find("#bas-market").off('change').on('change', $.proxy(this.changeBasMarket, this));
		this.dom.body.find("input[name='existingmarketwithin']").off('click').on('click', $.proxy(this.clickExistingMarketWithIn, this));
		this.dom.body.find(".create-rfds-workstep").off('click').on('click', $.proxy(this.clickCreateRfdsWorkstep, this));
		this.dom.body.find(".add-rfe-report-type-btn").off('click').on('click', $.proxy(this.clickAddRfeReportTypeBtn, this));
		this.dom.body.find('.btn_edit_cat').off('click').on('click', $.proxy(this.editCat, this));
		this.dom.body.find("#venueCategory2").off('change').on('change', $.proxy(this.updateCategoryText, this));
		this.dom.body.find("#venueCategory1").off('change').on('change', $.proxy(this.updateCategoryValues, this));
		this.dom.body.find("#isThisA3rdPartyDesign").off('change').on('change', $.proxy(this.updateIbvModal, this));
		this.dom.body.find('#IbvDocumentModal .sub-category-list').off('change').on('change', $.proxy(this.addIbvmandatoryFields, this));
		this.dom.body.find("input#catId").off('change').on('mouseover', $.proxy(this.updateCategoryTooltip, this));
		this.dom.body.find("#DesignReview").off('click').on('click', $.proxy(this.designReviewRequired, this));
		this.dom.body.find("#earthStationTemplate").off('click').on('click', $.proxy(this.downloadEarthStationTemplate, this));
		this.dom.body.find("#earthStationExceptionStatus").off('change').on('change', $.proxy(this.submitEarthStationExceptionStatus, this));
		this.dom.body.find('#earthStationExceptionStatus').attr('disabled', 'disabled');
		this.dom.body.find(".view-side-screen").off("click").on("click", $.proxy(sideScreenModule.onClickViewSideScreen, sideScreenModule));
		var userPrivilege = $("#userPrivilege").val();
		if (userPrivilege.includes('SPM_USER') && !userPrivilege.includes('FAA_FILINGS_SUPER_USER')) {
			$("#earthStationExceptionStatus").find("option[value='Approved']").attr("disabled", true);
			$("#earthStationExceptionStatus").find("option[value='Rejected']").attr("disabled", true);
		}

		var activationApproved = getActivationApprovedCount();
		if (activationApproved > 0) { // FUZE-4724
			this.dom.body.find('select,input,button,textarea').not('#Comments-SUBMIT_RFDS,#Comments-RFE,#Comments-INTERNATIONAL_BORDER,#Comments-QUIET_ZONE,#Comments-CARRIER_AGREEMENTS,#Comments-INSERVICE_DOCUMENTS,.save-comments-button,.save-button').attr('disabled', 'disabled');
		}

	},
	addIbvmandatoryFields: function(e) {
		let subCategegoryValue = this.dom.body.find('#IbvDocumentModal .sub-category-list').val();
		if (subCategegoryValue == 'ROM_TOTAL_SERVICES_COST_DOCS') {
			this.dom.body.find('#romCost, #romApproval').parent().addClass('mandatory-field');
		} else {
			this.dom.body.find('#romCost, #romApproval').parent().removeClass('mandatory-field');
		}

	},
	updateIbvModal: function(e) {
		let thirdPartyValue = this.dom.body.find("#isThisA3rdPartyDesign").val();


		if (thirdPartyValue == 'Yes') {
			this.dom.body.find('#IbvDocumentModal').removeClass('hide');
			if (this.dom.body.find('#IbvDocumentModal .doc-type-list').val() == 'RFDS_DOCUMENT') {
				this.dom.body.find('#IbvDocumentModal .sub-category-list').val('ROM_TOTAL_SERVICES_COST_DOCS').addClass('mandatory-field');
				this.dom.body.find('#romCost, #romApproval').addClass('empty').parent().addClass('mandatory-field');
				this.dom.body.find('.skip-doc-routing').val('Yes').change();
				this.dom.body.find('#IbvDocumentModal').parent().find('.custom-file-upload').removeClass('hide');
			}
		} else {
			this.dom.body.find('#IbvDocumentModal .sub-category-list').val('').removeClass('mandatory-field');
			this.dom.body.find('#IbvDocumentModal').addClass('hide');
			this.dom.body.find('#romCost, #romApproval').val('').removeClass('empty').parent().removeClass('mandatory-field');
			this.dom.body.find('#IbvDocumentModal').parent().find('.custom-file-upload').addClass('hide');
		}
		rfdsModule.disableFinalize();
	},
	disableFinalize: function(e) {
		let romReviewValue = this.dom.body.find('#romApproval').val();
		let isThisA3rdPartyDesign = this.dom.body.find('#isThisA3rdPartyDesign').val();
		let finalizeButton = this.dom.body.find('#IN_BUILDING_AND_VENUE.finalize-task-button');
		if ((romReviewValue && (romReviewValue == '01/01/1900' || romReviewValue != '09/09/1900')) || (romReviewValue == '' && isThisA3rdPartyDesign == 'No')) {
			finalizeButton.removeClass('disable');

		} else {
			finalizeButton.addClass('disable');
		}

	},
	saveRomValues: function(container) {
		payload = {}
		payload['siteProjectsId'] = $("#site-project-id").val();
		payload['romCost'] = container.find('#romCost').val();
		payload['isThisA3rdPartyDesign'] = container.find('#isThisA3rdPartyDesign').val();

		var ajax = new commonAjax();
		this.constructor.ajax.fireApi(payload, "tracker", "mergeProjectFields", $.proxy(function(response) {
			console.log("response value saved! ");

		}, this));
	},
	readExcelData: function(container, callback) {
		var romValue = ""
		var input = event.target;

		if (input.files[0] && ['xls', 'xlsx'].includes(input.files[0].name.split('.').at(-1))) {
			var reader = new FileReader();

			reader.onload = function() {
				var fileData = reader.result;
				var wb = XLSX.read(fileData, { type: 'binary' });

				wb.SheetNames.forEach(function(sheetName) {

					var rowObj = XLSX.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);
					let rowObject = rowObj.find(sheet => sheet["Verizon Wireless Provided Materials (Day-1)"] == "Total Labor and RF Services ");

					if (rowObject) {

						romValue = rowObject['__EMPTY_6']
						container.find("#romCost").val(romValue);

						if (romValue < 500000) {
							container.find("#romApproval").val("01/01/1900");
							container.find('.skip-doc-routing').val('Yes').addClass('disable');
							rfdsModule.disableFinalize();
							displayMessage("Selected file have Rom Services Cost value less than 500,000.");
							return;

						} else {
							container.find("#romApproval").val('');
							// rfdsModule.saveRomValues(container);
							container.find('.skip-doc-routing').val('No').change().addClass('disable');
							$('#document-routing-preview-modal #ibv-rfds-document').text(input.files[0].name);
						}

					} else {
						// incorrect  format of excel sheet
						displayError("Validation Error ", "Selected file does not have Rom Services Cost.");
					}
				})
			};
			reader.readAsBinaryString(input.files[0]);

		} else {
			// Incorrect format
			displayError("Validation Error ", "Selected file should be an excel sheet.");
		}

	},
	getDocDetails: function(docs) {
		let container = $('.ibv_rfds_task');
		if (container.parent().attr('data-status') != 'COMPLETED') {
			if (docs.length) {
				var document = {};
				document.documentID = docs[0].documentID; //11932245
				var ajax = new commonAjax();
				ajax.fireApi(document, "routing", "getDocRoutingFlow", function(response) {
					if (response.length) {
						let statusArr = []
						for (let i = 0; i < response.length; i++) {
							statusArr.push(response[i].status)
						}
						if (statusArr.includes('APPROVED') || statusArr.includes('REJECTED')) {
							container.find('#isThisA3rdPartyDesign').removeClass('disable');
							container.find('.custom-file-upload').removeClass('hidden');
						} else {
							container.find('#isThisA3rdPartyDesign').addClass('disable');
							container.find('.custom-file-upload').addClass('hidden');
						}
					} else {
						container.find('#isThisA3rdPartyDesign').removeClass('disable');
						container.find('.custom-file-upload').removeClass('hidden');
					}
				});
			} else {
				container.find('#isThisA3rdPartyDesign').removeClass('disable');
				container.find('.custom-file-upload').removeClass('hidden');
			}
		}
	},


	updateCategoryTooltip: function(e) {
		this.dom.body.find("input#catId").attr('data-original-title', this.dom.body.find("input#catId").val());
	},
	// to update the category text based on values selected in category 1 and category 2
	updateCategoryText: function(e) {
		let cat1Value = this.dom.body.find('#venueCategory1').val();
		let cat2Value = this.dom.body.find('#venueCategory2').val();
		let cat3Value = this.dom.body.find('#venueCategory3').val();

		if (cat1Value != '' || cat2Value != '') {
			let cat1ValueTrim = this.dom.body.find('#venueCategory1 option:selected').text().trim();
			let catText = []
			catText.push($(".project-info-sitetype").val(), cat1ValueTrim, cat2Value, cat3Value);
			this.dom.body.find('#catId').val(catText.join(' '));
		} else {
			this.dom.body.find('#catId').val('');
		}
	},
	updateCategoryValues: function(e) {
		this.dom.body.find("select#venueCategory2 option:not(:first)").remove();
		let cat1Value = this.dom.body.find("#venueCategory1").val();
		let proposedSiteType = $("#proj-site-type").val();

		if (cat1Value) {
			let payload = {
				"groupName": "PROJECTS_SETTINGS",
				"subType": "VENUE_CATEGORY_2"
			}
			payload['name'] = cat1Value
			this.constructor.ajax.fireApi(payload, "admin", "getEnumReferences", $.proxy(function(response) {
				if (response.length) {
					for (let res of response) {
						let category = res['value']
						this.dom.body.find("#venueCategory2").append(`<option value="${category}"> ${category}</option>`);
					}
					if (proposedSiteType == 'VENUE' && cat1Value == 'OTHER') {
						this.dom.body.find("#venueCategory2 option[value='Residential']").remove();
					}

				}

			}, this), false, false);

		}
		this.dom.body.find("#venueCategory2").val('');
		this.dom.body.find("#venueCategory3").val('');
		this.updateCategoryText();
	},
	validateCategory: function(taskName) {
		let parentContainer = this.dom.body.find('#' + taskName);
		// let parentContainer = this.dom.body.find('#'+taskName).find('.mandatory-field').not('.catId');
		let cat1 = parentContainer.find('#venueCategory1');
		let cat2 = parentContainer.find('#venueCategory2');

		if (cat1.val() && cat2.val() == '') {
			let msg = ' Please select value from In-Building Venue Category 2 field ';
			displayError("Validation Error ", msg);
			return false;
		}
		return true;
	},
	validateIBV: function(taskName) {
		let venueCat = this.dom.body.find('#catId');
		let count = venueCat.val().split(' ').length;
		if (count < 3 && this.dom.body.find('.ibv-btn').attr('aria-expanded') == 'false') {
			let msg = 'Please enter value for ' + venueCat.parent().attr('data-original-title');
			displayError("Validation Error ", msg);
			return false;
		}

		let parentContainer = this.dom.body.find('#' + taskName).find('.mandatory-field').not('.catId');
		for (let item = 0; item < parentContainer.length; item++) {
			let self = $(parentContainer[item]);
			let category = self.find('select, input');
			if (!category.val()) {
				let msg = 'Please enter value for ' + category.attr('data-original-title');
				displayError("Validation Error ", msg);
				return false;
			}
		}
		return true;
	},
	displayEarthStationTemplate: function(e) {
		var payLoad = {};
		payLoad.siteProjectsId = this.dom.siteProjectsId;
		var ajax = new commonAjax();
		ajax.fireApi(payLoad, "project", "isEarthStationValidationRequired", function(response) {
			if (response) {
				$("#earthStationTemplate, #earthStationGuidanceLink, .earth-station-exception-select-block").removeClass("hide");
			}
		});
	},
	downloadEarthStationTemplate: function(e) {
		var document = {};
		document.siteInfoId = this.dom.siteInfoId;
		document.siteProjectsId = this.dom.siteProjectsId;
		var params = {};
		params.payload = JSON.stringify(document);
		params.uri = "projects-gateway/projects-service/project/downloadEarthStationDocument";  /// change the url
		console.log(params);
		displayFuzeDocuments(params);
	},
	submitEarthStationExceptionStatus: function(e) {
		var submitInserviceContainer = $(".inservice_document");
		section = $(e.currentTarget).attr('data-section');
		var payload = getActualForecastMergePayload(submitInserviceContainer);
		if (payload.save) {
			projectPageModule.commonMerge(payload.payload, "INSERVICE_DOCUMENTS", function(response) {

			});
		}
		if (this.dom.body.find('#earthStationExceptionStatus').val() == "Rejected") {
			var milestoneName = $("." + this.dom.taskName).closest('.panel .panel-default').attr('id');
			var projTracker = {};
			projTracker.projTrackerTaskId = this.dom.body.find('.create-rfds-workstep').attr('role');
			projTracker.siteProjectsId = this.dom.siteProjectsId;
			projTracker.workStepName = "INSERVICE_DOCUMENTS";
			section = $(e.currentTarget).attr('data-section');
			var projTaskComment = {};
			projTaskComment.commentText = "Earth Station Exception has been rejected for this project. Please contact hq.network.interference.support@verizon.com for questions or further information";
			projTaskComment.commentType = this.dom.taskName;
			projTaskComment.siteProjectsId = this.dom.siteProjectsId;
			projTaskComment.isSystemComment = 1;
			mergeTaskCommentsCall(projTaskComment, this.dom.siteProjectsId, () => {
				$("." + this.dom.container).find("." + section).find(".comments").val("");
			});
			rejectTaskCall(projTracker, projTracker.projTrackerTaskId, projTracker.workStepName, milestoneName, function(response) {
				$("#reject-rf-task-modal").modal("hide");
			});
		}
		if (this.dom.body.find('#earthStationExceptionStatus').val() == "Requested") {
			var ajax = new commonAjax();
			var taskPayload = {};
			taskPayload.siteProjectsId = $("#site-project-id").val();
			taskPayload.workStepName = "INSERVICE_DOCUMENTS" + "_INSERT";
			taskPayload.trackerStatus = "ACTIVE";
			taskPayload.userReviewStatus = "";
			ajax.fireApi(taskPayload, 'tracker', 'insertProjTrackerTaskDetails', function(response) {
				getProjectStatus(taskPayload.siteProjectsId, function(response, siteProjectsId) {
					populateWorkStepStatus(response, taskPayload.siteProjectsId, "ACTIVE",
						"INSERVICE_DOCUMENTS");
				});
			});
		} if (this.dom.body.find('#earthStationExceptionStatus').val() == "Approved") {
			var ajax = new commonAjax();
			var taskPayload = {};
			var taskId = this.dom.body.find('.create-rfds-workstep').attr('role');
			saveTaskDetails("INSERVICE_DOCUMENTS", false, () => {
				codeForCommonFinalize("INSERVICE_DOCUMENTS", taskId, "RFDS", this.dom.body.find('.finalize-task-button'));
			});
		}
	},
	editCat: function() {
		let isExpanded = this.dom.body.find('.btn_edit_cat').attr('aria-expanded');
		let formContainer = this.dom.body.find("#category-edit");
		if (isExpanded == 'true') {
			formContainer.find('.ec-mand-field').removeClass('empty').parent().removeClass('mandatory-field');
		}
		else {
			formContainer.find('.ec-mand-field').addClass('empty').parent().addClass('mandatory-field');
		}
		formContainer.find("input,select").val('');
	},
	removeMandatory: function() {
		let formContainer = this.dom.body.find(".venueCapacity");
		if ($(".project-info-sitetype").val() != 'VENUE') {
			let formContainer = this.dom.body.find(".venueCapacity");
			formContainer.find('.venueCapacity').removeClass('empty').parent().removeClass('mandatory-field');
		} else {
			formContainer.find('.venueCapacity').addClass('empty').parent().addClass('mandatory-field');
		}
	},
	disableIBVFields: function(taskName, status) {
		var parentMilestoneConatiner = $(".project_body_container").find("#" + taskName);
		if ($("." + taskName).attr('data-status') == status) {
			parentMilestoneConatiner.find('select#isThisA3rdPartyDesign').addClass('disable');
		}

	},

	enableIBVFields: function(taskName, status) {
		var parentMilestoneConatiner = $(".project_body_container").find("#" + taskName);
		if ($("." + taskName).attr('data-status') == status) {
			parentMilestoneConatiner.find('select#isThisA3rdPartyDesign').removeClass('disable');
		}

	},
	renderCategory1: function(taskName) {
		var parentMilestoneConatiner = $(".project_body_container").find("#" + taskName);
		let proposedSiteType = $("#proj-site-type").val();
		let dropDownList = $('#venueCategoryOne');
		let categoryList;

		if (parentMilestoneConatiner.find('#venueCategory1 option').length < 2) {
			if (proposedSiteType == 'IN-BUILDING' || proposedSiteType == 'IN-BUILDING-VBG') {
				categoryList = ['Airport', 'Amusement Park', 'Big Box Office', 'Casino', 'Concert Hall', 'Convention Center', 'Education Campus', 'Government Building', 'High-rise', 'Hospital', 'Hotel', 'Other', 'Stores', 'Transportation'];
			} else if (proposedSiteType == 'VENUE') {
				categoryList = ['Amphitheatre', 'Concert Hall', 'NCAA', 'Other', 'ProSports']
			}

			let ddList = dropDownList.val().slice(1, -1).split(',');
			ddList.forEach(item => {
				itemArray = item.split('=');
				//parentMilestoneConatiner.find('#venueCategory1').append(`<option value=${itemArray[0]}>${itemArray[1]}</option>`)
				if (['IN-BUILDING', 'IN-BUILDING-VBG', 'VENUE'].includes(proposedSiteType)) {
					if (categoryList.includes(itemArray[1])) {
						parentMilestoneConatiner.find('#venueCategory1').append(`<option value=${itemArray[0]}>${itemArray[1]}</option>`)
					}
				} else {
					parentMilestoneConatiner.find('#venueCategory1').append(`<option value=${itemArray[0]}>${itemArray[1]}</option>`)
				}
			})
		}
	},
	completeIBVWorkStep: function(taskName, taskId, milestoneName, self) {
		/*Section to show the loading icon and Disable it Starts*/
		var finalizeBtnParentContainer = self.parents("." + taskName);
		finalizeBtnParentContainer.find(".finalize-task-button .finalize-spinner").removeClass("hide");
		finalizeBtnParentContainer.find(".finalize-task-button").addClass("override_primary_btn_hover").prop('disabled', true);
		setTimeout(function() {
			finalizeBtnParentContainer.find(".finalize-task-button .finalize-spinner").addClass("hide");
			finalizeBtnParentContainer.find(".finalize-task-button").removeClass("override_primary_btn_hover").prop('disabled', false);
		}, guiBlockTimeoutNum);
		/*Section to show the loading icon and Disable it Ends */
		completeWorkStep(taskName, taskId, function(response, projectId) {
			populateWorkStepStatus(response, projectId, "COMPLETE", taskName, milestoneName);
		});
	},
	searchAllRaveTracker: function() {
		var payload = {};
		payload.searchKey = this.dom.siteInfoId;
		this.constructor.ajax.fireApi(payload, "rave", "searchAllRaveTracker", (res) => {
			if (res && res.length) {
				var row = res.find(row => row.trackerMode === "Project");
				if (row && Object.keys(row).length && row.siteProjectsId == this.dom.projectId) {
					this.dom.raveValidation = true;
				} else {
					this.dom.raveValidation = false;
				}
			}
		});
	},
	listRfdsProjects: function() {
		var siteInfo = {};
		var draftProj = {};
		var draftProjs = [];
		var rfdsProjects = [];
		siteInfo.siteInfoId = this.dom.siteInfoId;
		siteInfo.siteProjectsId = this.dom.siteProjectsId;
		this.constructor.ajax.fireApi(siteInfo, "rfds", "listRfdsProjects", (response) => {
			if (response && (response[0].siteType.toUpperCase() == 'IN-BUILDING' || response[0].siteType.toUpperCase() == 'VENUE' || response[0].siteType.toUpperCase() == 'IN-BUILDING-VBG') &&
				(response[0].siteSubType.toUpperCase() != 'EFEMTO' && response[0].siteSubType.toUpperCase() != 'WIFI' && response[0].siteSubType.toUpperCase() != 'ODAS' && response[0].siteSubType.toUpperCase() != 'REPEATER')) {
				this.dom.body.find("#DesignReviewCheck").removeClass("hide");
				if (response && response[0].isIbProjectSubmitted == 'SUBMITTED') {
					this.dom.body.find("#DesignReview").removeClass("disable");
					this.dom.body.find("#DesignReview").removeAttr("disabled");
				} else if (response && response[0].isIbProjectSubmitted == 'COMPLETED' || response[0].isIbProjectSubmitted == 'true') {
					this.dom.body.find("#DesignReview").prop("checked", true);
					this.dom.body.find("#DesignReview").addClass("disable");
				}
			}
			this.dom.body.find("#rfds_change_control").val(response[0].rfdsChangeControl);
			for (var i = 0; i < response.length; i++) {
				if (response[i].lastSubmittedDate) {
					if (response[i].projectStatus != "Submitted") {
						draftProj.title = response[i].lastGeneratedDocTitle;
						draftProj.path = response[i].lastGeneratedDocPath;
						draftProj.projectStatus = 'DRAFT';
						draftProj.projectCreationDate = response[i].projectCreationDate;
						draftProj.lastSubmittedDate = response[i].lastSubmittedDate;
						if (response[i].rfLastMofifiedBy) {
							draftProj.lastModifiedBy = response[i].rfLastMofifiedBy;
						} else {
							draftProj.lastModifiedBy = response[i].lastModifiedBy;
						}
						draftProj.lastModifiedDate = response[i].lastModifiedDate;
						draftProj.siteInfoId = response[i].siteInfoId;
						draftProj.rfdsProjectID = response[i].rfdsProjectID;
						draftProj.siteProjectsId = response[i].siteProjectsId;
						draftProjs.push(draftProj);
					}
					response[i].projectStatus = "Submitted";
					response[i].lastModifiedDate = response[i].lastSubmittedDate;
					if (response[i].rfLastMofifiedBy) {
						response[i].lastModifiedBy = response[i].rfLastMofifiedBy;
					} else {
						response[i].lastModifiedBy = response[i].lastModifiedBy;
					}
				}
			}

			if (draftProjs.length != 0) {
				rfdsProjects = response.concat(draftProjs);
				this.displayProjectsList(rfdsProjects);
			} else {
				this.displayProjectsList(response);
			}
		});
	},
	designReviewRequired: function() {
		$('.reviewChekLoad').removeClass("hide");
		var payload = {};
		payload.siteProjectsId = this.dom.siteProjectsId;
		this.dom.body.find("#DesignReview").addClass("disable");
		this.constructor.ajax.fireApi(payload, "rfds", "getRfdsProjectInfo", (response) => {
			this.constructor.ajax.fireApi(response, "rfds", "complateWorkStepForIBProject", (result) => {
				$('.reviewChekLoad').addClass("hide");
				window.location.reload();
			});
		});
	},
	displayProjectsList: function(projs) {
		let isHidden = false;
		for (var i = 0; i < projs.length; i++) {
			if (projs[i].projectStatus != "Submitted") {
				isHidden = true;
			}
		}
		this.dom.body.find(".submit-rfds-table").addClass("hide");
		this.dom.body.find(".submit-rfds-table").empty();
		this.dom.body.find(".submit-rfds-table").removeClass("hide");
		this.dom.body.find(".submit-rfds-table").kendoGrid({
			dataSource: {
				data: projs,
				pageSize: 3,
			},
			filterable: true,
			sortable: true,
			columns: [
				{
					field: "title",
					title: "Document",
					width: 155,
					template: (projs) => {
						var vendorPath =
							`<a href="#" data-path="${projs.path + "?" + new Date().getTime()}" class="text-underline text-link download-documents rfds-document">${projs.title}</a>`;
						var nonVendorPath =
							`<a href="${projs.path + "?" + new Date().getTime()}" class="text-underline text-link" target="_blank">${projs.title}</a>`;

						if ($("#isVendor").val() == "true") {
							return vendorPath;
						} else {
							return nonVendorPath;
						}
					},
					media: "(min-width: 768px)"
				},
				{
					field: "projectStatus",
					title: " Status",
					width: 110,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "projectCreationDate",
					title: " Created Date",
					template: "#= kendo.toString(new Date(parseInt(projectCreationDate)), 'MM-dd-yyyy, h:mm:ss tt')#",
					width: 135,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				// to show the rfds last submiited date
				{
					field: "lastSubmittedDate",
					title: "Last Submitted Date",
					//	    				hidden : isHidden,
					template: "#= kendo.toString(new Date(parseInt(lastSubmittedDate)), 'MM-dd-yyyy, h:mm:ss tt')#",
					width: 135,

					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "lastModifiedBy",
					title: " Last Modified By",
					width: 110,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "rfdsSource",
					title: " RFDS Source",
					width: 110,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "lastModifiedDate",
					title: " Last Modified Date",
					template: "#= kendo.toString(new Date(parseInt(lastModifiedDate)), 'MM-dd-yyyy, h:mm:ss tt')#",
					width: 135,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "editable",
					title: " Action",
					template: '<a class= "text-underline text-link" href="/rfds?siteInfoId=#=siteInfoId#&rfdsProjId=#=rfdsProjectID#&source=RFDS" target="_blank">Edit RFDS</a>' +
						' / ' + '<a class= "text-underline text-link" href="/rfds?rfdsProjId=#=rfdsProjectID#&siteInfoId=#=siteInfoId#&type=0&source=RFDS" target="_blank">View RFDS</a>' +
						' / ' + '<a class= "text-underline text-link" href="' + $("#nppBaseUrl").val() + '/rfds/RfdsService?projectnumber=#=siteProjectsId #&fuzeSiteId=#=siteInfoId#" target="_blank">Edit RFDS in NPP</a>',
					width: 110,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "siteInfoId",
					title: " Status",
					width: 110,
					hidden: true,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					field: "rfdsProjectID",
					title: " Status",
					width: 110,
					hidden: true,
					filterable: {
						extra: false,
						multi: true,
						search: true
					},
					media: "(min-width: 768px)"
				},
				{
					title: "RFDS Projects",
					template: kendo.template($("#submit_rfds_mob_template").html()),
					media: "(max-width: 767px)"
				}
			]
		});
	},
	commonShowDocsAfterGridLoad: function(e) {
		let grid = e.sender;
		grid.element.parents(".documents-result").removeClass("hide");
		let taskRole = grid.element.closest(".tab-pane").attr("data-status");
		let mileStoneRole = grid.element.closest(".panel-default").attr("data-status");
		grid.element.find(".k-delete-document").addClass("disable");
		if (mileStoneRole !== "COMPLETED" && mileStoneRole !== undefined) {
			if (taskRole !== "COMPLETED" && taskRole !== undefined) {
				grid.element.find(".k-delete-document").removeClass("disable");
			}
		}
		grid.resize();
	},
	saveRfe: function(reportType, mitigationRequired, powerAdjustmentRequired) {
		var request = {};
		request.reportType = reportType;
		request.mitigationRequired = mitigationRequired;
		request.powerAdjustmentRequired = powerAdjustmentRequired;
		request.siteProjectsId = this.dom.projectId;
		this.constructor.ajax.fireApi(request, "project", "mergeProjRfeDetails", (response) => {
			this.getProjRfeDetails();
		});
	},
	loadRfeReportTypes: function(callback) {
		this.dom.body.find("#rfe-report-type-list").empty();
		this.dom.body.find("#rfe-report-type-list").append($("<option></option>").prop("value", "").text("Nothing Selected"));
		let arr = ['3rd Party Jurisdictional EME Assessment', '5G Standalone - Internal RFE Analysis', 'Bulk RFE Compliance Analysis Tool', 'RFE Compliance Analysis Tool', 'RF Safety Plan Letter']
		let siteType = $('.project-info-sitetype').val();
		if (siteType && siteType === 'MULTI-CUSTOMER-UNIT') {
			this.dom.body.find(".all-access-rfe-template-url").removeClass('hide');
		} else {
			this.dom.body.find(".all-access-rfe-template-url").addClass('hide');
		}

		this.constructor.ajax.fireMetaServiceAPI("project", "metadata", "getRfeReportTypes", (response) => {
			rfeReportType = response;
			$.each(response, (i, data) => {
				if (data !== null && data !== undefined && data !== 'Post 3rd Party EME Assessment' && !arr.includes(data)) {
					let cls = i === "RFE_READING_RESULTS" ? "hide" : "";
					if (siteType && siteType === 'MULTI-CUSTOMER-UNIT' && (i === '3RD_PARTY_EME_ASSESSEMENT' || i === 'VERIZON_SELECT_INTERNET_MDU_RFE')) {
						this.dom.body.find("#rfe-report-type-list").append($(`<option class="${cls}"></option>`).prop("value", i).text(data));
					} else if (siteType && siteType !== 'MULTI-CUSTOMER-UNIT' && i !== 'VERIZON_SELECT_INTERNET_MDU_RFE') {
						this.dom.body.find("#rfe-report-type-list").append($(`<option class="${cls}"></option>`).prop("value", i).text(data));
					}
				}
			});

			if (callback) {
				callback();
			}
		});
	},
	getProjRfeDetails: function() {
		var request = {};
		request.siteProjectsId = this.dom.projectId;
		this.constructor.ajax.fireApi(request, "project", "getProjRfeDetails", (response) => {
			if (response) {
				this.displayProjRfeDetails(response)
			}
		});
	},
	displayProjRfeDetails: function(response) {
		this.dom.body.find(".rfe-report-type-selected-block").empty();
		var template = this.dom.body.find(".rfe-report-type-template").html();
		$.each(response, (i, data) => {
			if (data !== null && data !== undefined) {
				var reportTypeVal = data.reportType;
				var reportTypeText = rfeReportType[reportTypeVal];
				var mitigation = data.mitigationRequired ? data.mitigationRequired.toUpperCase() : "";
				var powerAdjustment = data.powerAdjustmentRequired ? data.powerAdjustmentRequired.toUpperCase() : "";
				rfeReportTypeVal = data;

				this.dom.body.find(".rfe-report-type-selected-block").append(
					template.replace(/@REPORT_TYPE_TEXT/g, reportTypeText)
						.replace(/@REPORT_TYPE_VAL/g, reportTypeVal)
						.replace(/@SITE_PROJECTS_ID/g, $("#site-project-id").val())
				);

				// $(".rfe-report-type-selected-block").find("input[name='"
				// + reportTypeVal + "'][value=" + data.mitigationRequired +
				// "]").prop("checked", true);
				this.dom.body.find(".rfe-report-type-selected-block").find("#" + reportTypeVal + "_" + mitigation).prop("checked", true);
				if (reportTypeVal == '3RD_PARTY_EME_ASSESSEMENT') {
					this.dom.body.find(".poweAdjustmentEme").removeClass('hide');
				}
				if (powerAdjustment.toLowerCase().includes("yes")) {
					this.dom.body.find("#poweradjustment_yes").prop("checked", true);
					this.getAtollTransmitterData();

				} else if (powerAdjustment.toLowerCase().includes("no")) {
					this.dom.body.find("#poweradjustment_no").prop("checked", true);
				}
				if (reportTypeVal === "CANE_LETTER") {
					this.dom.body.find("input[name='CANE_LETTER']").addClass('disable');
				}
				if (reportTypeVal === "RAVE") {
					this.dom.body.find("input[name='RAVE']").addClass('disable');
					this.dom.body.find("#proj-rfe-document-table .k-grid-content").find('tr td:nth-child(1)').addClass('disable');
				}
				this.dom.body.find("#rfe-report-type-list").val(data.reportType);
			}
		});
		this.dom.body.find(".mitigation-radio").off('click').on('click', $.proxy(this.clickMitigationRadio, this));
		this.dom.body.find(".poweAdjustmentradio").off('click').on('click', $.proxy(this.clickPowerAdjustmentRadio, this));
		this.dom.body.find("#uploadExcelData").off('click').on('click', $.proxy(this.importAtollTransmitterData, this));
	},
	getCallSignsWrap: function(callSignsReq) {

		var mapping = {};
		mapping["band700m"] = "700 Mhz";
		mapping["band850m"] = "850 Mhz";
		mapping["band1900m"] = "1900 Mhz";
		mapping["band2100m"] = "2100 Mhz";
		mapping["cband"] = "CBAND";

		var map = {};
		var renderTable = false;
		var filteredReponse = {};
		this.constructor.ajax.fireApi(callSignsReq, "regulatory-licenses", "getCallSignsApproval", (response) => {
			filteredReponse["band700m"] = response.band700m;
			filteredReponse["band850m"] = response.band850m;
			filteredReponse["band1900m"] = response.band1900m;
			filteredReponse["band2100m"] = response.band2100m;
			filteredReponse["cband"] = response.cband;

			$.each(filteredReponse, (i, data) => {
				if (data && data.length) {
					// map[i] = mapping[i];

					renderTable = false;
					if (data[0].intlBorder700 === "TRUE" && data[0].intlBorderNon700 === "TRUE") {
						renderTable = true;
					} else if (i === "band700m" && data[0].intlBorder700 === "TRUE" && data[0].intlBorderNon700 === "FALSE") {
						renderTable = true;
					} else if (i !== "band700m" && data[0].intlBorder700 === "FALSE" && data[0].intlBorderNon700 === "TRUE") {
						renderTable = true;
					} else if (i == "cband" && data[0].intlBorderCBand === "TRUE") {
						renderTable = true;
					}
					if (callSignsReq.refType === "AWS") { // for BAS
						// review

						this.loadAWSCallsigns(data, i);
					}
					if (renderTable) {
						map[i] = mapping[i];
						this.loadCallSignDetails(data, i);
					}
				}
			});
			setCallSigns(map);
		});
	},

	loadCallSignDetails: function(response, callSignId) {
		var title;

		if (response && response.length !== 0) {
			var templateHeader = this.dom.body.find(".international-table-header-template").html();
			if (callSignId === "band700m") {
				title = "700 Mhz"
			} else if (callSignId === "band850m") {
				title = "850 Mhz"
			} else if (callSignId === "band1900m") {
				title = "1900 Mhz"
			} else if (callSignId === "band2100m") {
				title = "2100 Mhz"
			} else if (callSignId === "cband") {
				title = "C-BAND";
			}
			//this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));
			var optionSelectedYes = $("#signalextend-yes").val();
			var optionSelectedNo = $("#signalextend-no").val();


			if ($("#signalextend-yes").is(":checked")) {
				$("#"+callSignId+"-agreementTimeoutDiv").show();
				$("#"+callSignId+"-notificationTimeoutDiv").hide();

			} else if ($("#signalextend-no").is(":checked")) {
				$("#"+callSignId+"-agreementTimeoutDiv").hide();
				$("#"+callSignId+"-notificationTimeoutDiv").show();
			}
			
			var tableHeader = templateHeader.replace(/@BANDWIDTH/g, title).replace(/@ID/g, callSignId).replace(/@VZREGSERVICE/g, response[0].vzRegService).replace(/@DOC_CATEGORY/g, title.replace(" Mhz", ""));
			// $.each(response, function(i, data) {
			// tableModifiedHeader = tableHeader.replace(/@VZREGSERVICE/g,
			// data.vzRegService);
			// });
			this.dom.body.find(".international-callsign-tables").append(tableHeader);
			let tableId = this.dom.body.find("#" + callSignId + "-international-colnames");
			let columns = this.getCallsignsColumns(false); // don't hide
			// last 2 cols


			createKendoGrid(tableId, columns, response);

			if (callSignId === "band700m") {
				if (response[0].intlBorderExtendsFor700Mhz === 'Yes') {
					this.appendFccRadioValues(".band700m", true, false);
				} else {
					this.appendFccRadioValues(".band700m", false, true);
				}
			} else if (callSignId === "band850m") {
				if (response[0].intlBorderExtendsForCellular === 'Yes') {
					this.appendFccRadioValues(".band850m", true, false);
				} else {
					this.appendFccRadioValues(".band850m", false, true);
				}
			} else if (callSignId === "band1900m") {
				if (response[0].intlBorderExtendsForPCS === 'Yes') {
					this.appendFccRadioValues(".band1900m", true, false);
				} else {
					this.appendFccRadioValues(".band1900m", false, true);
				}
			} else if (callSignId === "band2100m") {
				if (response[0].intlBorderExtendsForAWS === 'Yes') {
					this.appendFccRadioValues(".band2100m", true, false);
				} else {
					this.appendFccRadioValues(".band2100m", false, true);
				}
			}
			else if (callSignId === "cband") {
				if (response[0].intlBorderExtendsForCBand === 'Yes') {
					this.appendFccRadioValues(".cband", true, false);
				} else {
					this.appendFccRadioValues(".cband", false, true);
				}
			}
		} else {
			console.info("No Callsigns");
		}
	},

	appendFccRadioValues: function(className, value1, value2) {
		$(className+"-agreementTimeoutDiv").show();
		$(className+"-notificationTimeoutDiv").hide();
		this.dom.body.find(className + "-yes").prop("checked", value1);
		this.dom.body.find(className + "-no").prop("checked", value2);
		this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));

	},
	/**changeFccRadioBlock: function() {
		   var isChecked = $(this).prop("checked");
		   if ($(this).val() === "Yes" && isChecked) {
			   this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));
   	
			   $("#agreementTimeoutDiv").show();
			   $("#notificationTimeoutDiv").hide();
			  
		   } else if ($(this).val() === "No" && isChecked) {
			   $("#agreementTimeoutDiv").hide();
			   $("#notificationTimeoutDiv").show();
			   this.dom.body.find(".fcc-radio").off('change').on('change', $.proxy(this.changeFccRadio, this));
   	
			 
		   }
	   },*/


	getBasData: function() {
		var callSignsReq = {};
		callSignsReq.refType = "AWS";
		callSignsReq.searchKey = this.dom.projectId;
		this.getCallSignsWrap(callSignsReq);
	},

	loadAWSCallsigns: function(response, i) {

		if (i === "band2100m" && response !== null && response !== undefined) {
			let columns = this.getCallsignsColumns(true);

			// grid should only contain rows where freqBandCode === "A"
			response = response.filter(data => data.freqBandCode === "A");

			// perform the following logic for each row in the response
			response.forEach(data => {
				this.dom.body.find("#bas-market").val(data.basMarket);
				this.basMarketShow();
				this.dom.body.find("#signalextend-" + data.isSiteWithinBasRange).prop("checked", true);
				this.dom.body.find(".bas-doc-upload").addClass("hide");
				if (this.dom.body.find("#signalextend-" + data.isSiteWithinBasRange).val() === "Yes") {
					this.dom.body.find(".bas-doc-upload").removeClass("hide");
				}
			});
			createKendoGrid("#bas-review-callsigns-table", columns, response);
		}
	},

	getCallsignsColumns: function(extraColumns) {
		return [{
			field: "callSigns",
			title: "Callsigns",
			media: "(min-width: 768px)"
		}, {
			field: "freqBandCode",
			title: "Block",
			media: "(min-width: 768px)"
		}, {
			field: "entityName",
			title: "Licensee Name",
			media: "(min-width: 768px)"
		}, {
			field: "whollyOwned",
			title: "Wholly Owned",
			media: "(min-width: 768px)"
		}, {
			field: "maxErp",
			title: "ERP",
			media: "(min-width: 768px)"
		}, {
			field: "freqRange1",
			title: "Freq Range 1",
			media: "(min-width: 768px)"
		}, {
			field: "freqRange2",
			title: "Freq Range 2",
			media: "(min-width: 768px)"
		}, {
			field: "freqRange3",
			title: "Freq Range 3",
			media: "(min-width: 768px)"
		}, {
			field: "freqRange4",
			title: "Freq Range 4",
			media: "(min-width: 768px)"
		}, {
			field: "borderDistance",
			title: "Border Distance(mi)",
			hidden: extraColumns,
			media: "(min-width: 768px)"
		}, {
			field: "country",
			title: "Country",
			hidden: extraColumns,
			media: "(min-width: 768px)"
		}, {
			template: kendo.template(this.dom.body.find("#intl-callsigns-responsive-grid-template").html()),
			media: "(max-width: 767px)"
		}];
	},

	basMarketShow: function() {
		this.dom.body.find(".bas-market-data").empty();
		var val = this.dom.body.find("#bas-market").val();
		if (val !== "" && val !== undefined) {
			this.dom.body.find(".bas-market-data").append($("." + val).html());
		}
	},

	updateRfdsCallSigns: function(rfdsCallSigns, callback) {
		this.constructor.ajax.fireApi(rfdsCallSigns, "project", "updateRfdsCallSigns", (response) => {
			if (callback) {
				callback();
			}
		});
	},

	getCarrierAgreementTypes: function(callback) {
		this.constructor.ajax.fireMetaServiceAPI("project", "project", "getCarrierAgreementTypes", (response) => {
			carrierAgreementReportType = response;
			this.dom.body.find("#doc-report-type-list").empty();
			this.dom.body.find("#doc-report-type-list").append($("<option></option>").prop("value", "").text("Nothing Selected").prop('selected', 'true'));
			$.each(response, (i, data) => {
				if (data !== null && data !== undefined && i !== 'CONTOUR_EXTENSION_BEYOND_40') {
					this.dom.body.find("#doc-report-type-list").append($("<option></option>").prop("value", i).text(data));
				}
			});
			if (callback) {
				callback(response);
			}
		});
	},



	displayExtensionAgreement: function(reportType, isReportRequired, callsigns) {
		var cgsaCallsigns = this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").val();
		var template = this.dom.body.find(".carrier-agreement-template").html();
		this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();
		if (isReportRequired === "Yes") {
			if (cgsaCallsigns === null) {
				this.dom.body.find('#' + reportType + '_Yes').prop('checked', false);
				this.dom.body.find('#' + reportType + '_No').prop('checked', true);
				displayError("Error", "Please select callsigns for CGSA Border");
				return false;
			}
			this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
			this.dom.body.find("#callsign-list-" + reportType).empty();
			if (cgsaCallsigns !== undefined && cgsaCallsigns !== null) {
				if (cgsaCallsigns.length > 1) {
					$.each(cgsaCallsigns, (i, data) => {
						this.dom.body.find("#callsign-list-EXTENSION_AGREEMENT").append($("<option></option>").prop("value", data).text(callSignFrequency[data]));
					});
				} else {
					this.dom.body.find("#callsign-list-EXTENSION_AGREEMENT").append($("<option></option>").prop("value", cgsaCallsigns).text(callSignFrequency[cgsaCallsigns]));
				}
				this.dom.body.find(".carrier-agrmt-callsign-list").off('change').on('change', $.proxy(this.changeCarrierAgrmtCallsignList, this));
			}
			if (callsigns !== undefined && callsigns !== null) {
				this.dom.body.find("#callsign-list-" + reportType).val(callsigns.split(","));
			}
			this.dom.body.find("#callsign-list-" + reportType).selectpicker('refresh');
		}
	},

	displayContourExtension: function(reportType, isReportRequired, callsigns) {
		var cgsaCallsigns = this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").val();
		var template = this.dom.body.find(".carrier-agreement-template").html();
		this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();
		if (isReportRequired === "Yes") {
			this.dom.body.find("#EXTENSION_AGREEMENT").removeClass('hide');
			if (cgsaCallsigns === null) {
				this.dom.body.find('#' + reportType + '_Yes').prop('checked', false);
				this.dom.body.find('#' + reportType + '_No').prop('checked', true);
				displayError("Error", "Please select callsigns for CGSA Border");
				return false;
			}
			$(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
			this.dom.body.find("#callsign-list-" + reportType).empty();
			if (cgsaCallsigns !== undefined && cgsaCallsigns !== null) {
				if (cgsaCallsigns.length > 1) {
					$.each(cgsaCallsigns, (i, data) => {
						this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").append($("<option></option>").prop("value", data).text(callSignFrequency[data]));
					});
				} else {
					this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").append($("<option></option>").prop("value", cgsaCallsigns).text(callSignFrequency[cgsaCallsigns]));
				}
				this.dom.body.find(".carrier-agrmt-callsign-list").off('change').on('change', $.proxy(this.changeCarrierAgrmtCallsignList, this));
			}
			if (callsigns !== undefined && callsigns !== null) {
				this.dom.body.find("#callsign-list-" + reportType).val(callsigns.split(","));
			}
			this.dom.body.find("#callsign-list-" + reportType).selectpicker('refresh');
		} else {
			this.dom.body.find("#EXTENSION_AGREEMENT").addClass('hide');
		}
	},

	addCallSigns: function(reportType, isReportRequired, callsigns, action) {
		var self = rfdsModule;
		var template = self.dom.body.find(".carrier-agreement-template").html();
		self.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();

		if (isReportRequired === "Yes") {
			if (reportType !== "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA") {
				self.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
			} else {
				console.log("The Report Type is CONTOUR_EXTENSION_INTO_UNLICENSED_AREA")
			}
		} else {

			if (reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" && isReportRequired === "No") {

				self.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40").removeClass('hide');

				self.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").append(template.replace(/@REPORT_TYPE_VAL/g, reportType));
			} else {
				console.log("The Report Type is not CONTOUR_EXTENSION_INTO_UNLICENSED_AREA")
			}
			if (reportType === "CONTOUR_EXTENSION_BEYOND_40") {
				self.dom.body.find("#EXTENSION_AGREEMENT_No").prop("checked", false);
				self.dom.body.find("#EXTENSION_AGREEMENT").addClass('hide')
			}
		}
		self.getProjCallSignsCommon(reportType, isReportRequired, callsigns, action);

	},

	getProjCallSignsCommon: function(reportType, isReportRequired, callsigns, action) {
		var carrierAgreementsContainer = this.dom.body.find(".carrier-agreements-select-block");
		this.dom.body.find("#callsign-list-" + reportType).empty();
		this.getProjCallSigns(reportType, (response) => {
			if (!jQuery.isEmptyObject(response)) {
				$.each(response, (i, data) => {
					if (data !== null && data !== undefined) {
						this.dom.body.find("#callsign-list-" + reportType).append($("<option></option>").prop("value", i).text(data));
					}
				});
				this.dom.body.find(".carrier-agrmt-callsign-list").off('change').on('change', $.proxy(this.changeCarrierAgrmtCallsignList, this));
				if (callsigns !== undefined && callsigns !== null) {
					this.dom.body.find("#callsign-list-" + reportType).val(callsigns.split(","));
				}
				this.dom.body.find("#callsign-list-" + reportType).selectpicker('refresh');
				if (isReportRequired === "Yes" || isReportRequired === "" || isReportRequired === undefined) {
					reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" ? this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40, #EXTENSION_AGREEMENT").addClass('hide') : "";
				} else {
					reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" ? this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40").removeClass('hide') : "";
				}
				if (reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" && isReportRequired === "Yes") {
					this.dom.body.find('#CONTOUR_EXTENSION_BEYOND_40_No').prop('checked', true);
					this.dom.body.find('#CONTOUR_EXTENSION_BEYOND_40_Yes').prop('checked', false);
					this.dom.body.find('#EXTENSION_AGREEMENT_No').prop('checked', true);
					this.dom.body.find('#EXTENSION_AGREEMENT_Yes').prop('checked', false);
					this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").empty();
					this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").change();

				} else {
					console.log("850 callsigns are going as no");
				}
			} else {
				reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" ? this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40, #EXTENSION_AGREEMENT").addClass('hide') : "";
				reportType === "CONTOUR_EXTENSION_BEYOND_40" ? this.dom.body.find("#EXTENSION_AGREEMENT").removeClass('hide') : "";
				this.dom.body.find(".carrier-agreements-select-block").find('#' + reportType).find(".carrier-agreements-selected-block").empty();

				if (reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA") {

					carrierAgreementsContainer.find("#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").attr("data-850-callsigns", "No");
					$('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_No, #CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_Yes, #CONTOUR_EXTENSION_BEYOND_40_No, #CONTOUR_EXTENSION_BEYOND_40_Yes, #EXTENSION_AGREEMENT_No, #EXTENSION_AGREEMENT_Yes').prop('checked', false);
					$("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").empty();
					$("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").change();

					// Delay in setting the dom
					setTimeout(() => {
						this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA').addClass('hide');
						this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #CONTOUR_EXTENSION_BEYOND_40, #EXTENSION_AGREEMENT').removeClass("mandatory_label_before");
						if (action && action === "CHANGE" && isReportRequired === "Yes") { //NTSCE-10311
							this.mergeProjCarrierAgreementDetails(reportType, displayMessage("No CallSigns Available for " + reportType));
						} else {
							this.mergeProjCarrierAgreementDetails(reportType);
						}
					}, 100);

				} else {

					this.dom.body.find('#' + reportType + '_No').prop('checked', true);

					// Delay in setting the dom
					setTimeout(() => {
						if (action && action === "CHANGE" && isReportRequired === "Yes") { //NTSCE-10311
							this.mergeProjCarrierAgreementDetails(reportType, displayMessage("No CallSigns Available for" + reportType));
						} else {
							this.mergeProjCarrierAgreementDetails(reportType);
						}
					}, 100);


				}
				this.dom.body.find('#' + reportType + '_Yes').prop('checked', false);
			}
		});
	},

	getProjCallSigns: function(reportType, callback) {
		var projectSearchRequest = {};
		projectSearchRequest.siteProjectsId = this.dom.projectId;
		projectSearchRequest.searchKey = reportType;
		this.constructor.ajax.fireApi(projectSearchRequest, "project", "getProjCallSigns", (response) => {
			var isESValid = response.isESValid;
			var isCbandSiteOrProject = response.isCbandSiteOrProject;
			var isContigUnlicensed = response.CONTIG_50_SQMI_UNLICENSED;
			delete response["isESValid"];
			delete response["isCbandSiteOrProject"];
			delete response["CONTIG_50_SQMI_UNLICENSED"];

			if (reportType === "") {
				callSignFrequency = response;
			} else if (reportType === "8Cs") {
				cellularCallSigns = [];
				$.each(response, (callsign, frequency) => {
					cellularCallSigns.push(callsign);
				});
			}
			var cbandFound = Object.values(response).find(a => a.match("C-Band"));
			if (reportType === "") { // ONLY ON LOAD
				if (cbandFound) {
					if (isCbandSiteOrProject == "true" && isESValid == "true") {
						this.constructor.mandateESDocs = true;
						let payload = {
							siteProjectsId: this.dom.siteProjectsId,
							siteInfoId: this.dom.siteInfoId
						}
						this.constructor.ajax.fireApi(payload, "rfds-callsign", "getAtollEarthStationData", (res) => {
							this.atollTransmitterGrid(res, "rfds-cband-table");
						})
						this.dom.body.find('.c-band-body .rfds-cband-template').removeClass('hide');

						$("#c-band-gNB-equipment-type").val(projectDetailsWrapper.projAdditionalInfo.cbEqType);
						if (projectDetailsWrapper.projAdditionalInfo.earth_station_agreement == 'true') {
							$("#earth-station-agreement").prop("checked", true);
						} else {
							$("#earth-station-agreement").prop("checked", false);
						}
						var esdma = projectDetailsWrapper.projAdditionalInfo.esdma.split(',')
						$("#earth-station-design-mitigation-applied").val(esdma);
						$("#earth-station-design-mitigation-applied").selectpicker('refresh');
						this.dom.body.find('.c-band-body .earth-station-fields').removeClass('hide');

					} else {
						this.constructor.mandateESDocs = false;
						this.dom.body.find('.c-band-body .rfds-cband-template').addClass('hide');
						this.dom.body.find('.c-band-body .earth-station-fields').addClass('hide');
					}

					this.dom.body.find('.c-band-header, .c-band-body').removeClass('hide');
				} else {
					this.dom.body.find('.c-band-header, .c-band-body').addClass('hide');
				}

			}
			if (["CONTOUR_EXTENSION_INTO_UNLICENSED_AREA", "CONTOUR_EXTENSION_BEYOND_40", "EXTENSION_AGREEMENT"].includes(reportType) || reportType === "") {
				var callsigns850 = Object.values(response).find(a => a.match('850'));

				if (callsigns850) {
					this.dom.validate850 = true;
					this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, .850_callsigns_header').removeClass('hide');
					this.dom.body.find("#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").attr("data-850-callsigns", "Yes");
				} else {
					this.dom.validate850 = false;
					this.dom.body.find("#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA").attr("data-850-callsigns", "No");
					this.dom.body.find('#CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_No, #CONTOUR_EXTENSION_INTO_UNLICENSED_AREA_Yes, #CONTOUR_EXTENSION_BEYOND_40_No, #CONTOUR_EXTENSION_BEYOND_40_Yes, #EXTENSION_AGREEMENT_No, #EXTENSION_AGREEMENT_Yes').prop('checked', false);
					this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").empty();
					this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_INTO_UNLICENSED_AREA, #callsign-list-CONTOUR_EXTENSION_BEYOND_40, #callsign-list-EXTENSION_AGREEMENT").change();
				}
				if (isContigUnlicensed == 'No') {
					this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED').removeClass('hide');
					this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_No').prop('checked', true);
					this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_Yes').prop('checked', false);
				} else if (isContigUnlicensed == 'Yes') {
					this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED').removeClass('hide');
					this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_Yes').prop('checked', true);
					this.dom.body.find('#CONTIG_50_SQMI_UNLICENSED_No').prop('checked', false);

				}
			}
			if (callback) {
				callback(response);
			}
		});
	},


	mergeProjCarrierAgreementDetails: function(reportType, callback) {

		var projCarrierAgreementDetails = {};

		var callSigns = this.dom.body.find("#callsign-list-" + reportType).val();
		var isReportRequired = this.dom.body.find('input[name=' + reportType + ']:checked').val() === undefined ? "" : this.dom.body.find('input[name=' + reportType + ']:checked').val();

		projCarrierAgreementDetails.reportType = reportType;
		projCarrierAgreementDetails.siteProjectsId = this.dom.projectId;
		projCarrierAgreementDetails.isReportRequired = isReportRequired;

		if (callSigns !== undefined && callSigns !== null) {
			projCarrierAgreementDetails.callSigns = callSigns.join(',');
		}
		this.constructor.ajax.fireApi(projCarrierAgreementDetails, "project", "mergeProjCarrierAgreementDetails", () => {

			this.dom.body.find("#" + reportType).attr('data-report-required', isReportRequired);

			if (reportType === "CONTOUR_EXTENSION_BEYOND_50") {
				var projCallSignMerge = {};
				var projReg850 = {};
				projReg850.contourExtensionBeyond50 = isReportRequired;
				projReg850.siteProjectsId = this.dom.projectId;
				projCallSignMerge.projReg850 = projReg850;

				this.constructor.ajax.fireApi(projCallSignMerge, "regulatory-licenses", "mergeCallSignsWrap");
			}

			if (reportType === "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" && isReportRequired === "Yes") {
				// Clean up the data
				this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40_No").prop("checked", true);
				this.dom.body.find("#CONTOUR_EXTENSION_BEYOND_40_Yes").prop("checked", false);
				this.dom.body.find("#EXTENSION_AGREEMENT_No").prop("checked", true);
				this.dom.body.find("#EXTENSION_AGREEMENT_Yes").prop("checked", false);
				this.mergeProjCarrierAgreementDetails("CONTOUR_EXTENSION_BEYOND_40");
			} else if (reportType === "CONTOUR_EXTENSION_BEYOND_40" && isReportRequired === "No") {
				this.mergeProjCarrierAgreementDetails("EXTENSION_AGREEMENT");
			}

			if (callback) {
				callback();
			}
		});
	},


	getProjCarrierAgreements: function(callback) {
		var projCarrierAgreementDetails = {};
		projCarrierAgreementDetails.siteProjectsId = this.dom.projectId;
		this.constructor.ajax.fireApi(projCarrierAgreementDetails, "project", "getProjCarrierAgreementDetails", (response) => {
			setCarrierAgreements(response);
			$.each(response, (i, data) => {
				if (data !== null && data !== undefined) {
					if (data.isReportRequired === 'No') {
						this.dom.body.find("#doc-report-type-list option[value=" + data.reportType + "]").remove();
					}
				}
			});
			if (callback) {
				callback(response);
			}
		});
	},

	displayCarrierAgreements: function(response) {
		// console.log(this);
		var self = rfdsModule;
		var extensionAgreementData = {};
		var contourAgreementData = {};
		$.each(response, (i, data) => {
			if (data !== null && data !== undefined) {
				var reportType = data.reportType;
				self.dom.body.find("#" + reportType).attr('data-report-required', data.isReportRequired);
				self.dom.body.find('#' + reportType + '_' + data.isReportRequired).prop('checked', true);
				if (reportType !== "EXTENSION_AGREEMENT" && reportType !== "CONTOUR_EXTENSION_BEYOND_40" && data.isReportRequired !== "No") {
					self.addCallSigns(reportType, data.isReportRequired, data.callSigns);
				} else if (reportType === "EXTENSION_AGREEMENT") {
					extensionAgreementData = data;
				} else if (reportType === "CONTOUR_EXTENSION_BEYOND_40") {
					contourAgreementData = data;
				}
			}
		});
		setTimeout(() => {
			if (contourAgreementData) {
				self.dom.body.find('#' + contourAgreementData.reportType + '_' + contourAgreementData.isReportRequired).prop('checked', true);
				self.displayContourExtension(contourAgreementData.reportType, contourAgreementData.isReportRequired, contourAgreementData.callSigns);
			}
			if (extensionAgreementData) {
				self.dom.body.find('#' + extensionAgreementData.reportType + '_' + extensionAgreementData.isReportRequired).prop('checked', true);
				self.displayExtensionAgreement(extensionAgreementData.reportType, extensionAgreementData.isReportRequired, extensionAgreementData.callSigns);
			}
		}, 1000);
	},

	getRfdsInserviceDocuments: function(obj, docids, finalizeField) {
		uploadedCallSigns = [];
		uploadedReportTypes = [];
		uploadedDocumnetsFor850Callsigns = [];
		var self = rfdsModule;
		var esDoc = false;
		$(".rfds-inservice-documents-block").empty();
		var taskId = rfdsModule.dom.body.find(".finalize-task-button").attr('role');
		var documentWrapper = {};
		documentWrapper.refType = "RFDS_INSERVICE_DOCUMENTS",
			documentWrapper.refNum = $("#site-project-id").val();
		documentWrapper.status = "uploaded";
		documentWrapper.siteInfoId = $("#site-info-id").val();
		self.dom.parent.find('#earthStationExceptionStatus').attr('disabled', 'disabled');
		self.dom.parent.find('#earthStationExceptionStatus').val("");
		var validation = null;
		searchDocuments(documentWrapper, (docList) => {
			$.each(docList, (i, data) => {
				if (data !== null && data !== undefined) {
					if (data.category === 'ES_POINT_ANALYSIS') {
						self.dom.parent.find('#earthStationExceptionStatus').removeAttr("disabled");
						self.dom.parent.find('#earthStationExceptionStatus').val(rfdsModule.constructor.esStatus);
					}
					rfdsModule.displayRfdsInserviceDocuments(docList, data.subCategory);
					uploadedCallSigns.push(data.subCategory);
					if (data.category === "8Cs" || data.category === "SHAPE_FILES") {
						uploadedDocumnetsFor850Callsigns.push(data);
					}
					uploadedReportTypes.push(data.category);
				}
			});
			if (finalizeField == "Yes") {
				validation = mileStoneFinalize.uploadInserviceDocValidateModule(false);
				if (validation.status) {
					completeWorkStep("INSERVICE_DOCUMENTS", taskId, function(wsStatusresponse, siteProjectsId) {
						populateWorkStepStatus(wsStatusresponse, siteProjectsId, "COMPLETE", "INSERVICE_DOCUMENTS", "RFDS");
					});
				}
			}
		});

	},
	displayRfdsInserviceDocuments: function(docList, subCategory) {
		// set label + subCat
		if (this.dom.body.find(".rfds-inservice-documents-block").find("." + subCategory).length === 0) {
			var headTemplate = this.dom.body.find(".rfds-inservice-doc-template-head").html();
			this.dom.body.find(".rfds-inservice-documents-block").append(
				headTemplate.replace(/@SUB_CATEGORY/g, subCategory)
					.replace(/@FREQUENCY_BAND_CODE/g, callSignFrequency[subCategory])
			);
		}
		var tableId = "#rfds-inservice-document-table-" + subCategory;

		let columns = this.getRfdsInserviceDocColumns();

		// filter out docs where subCat does not match with what is passed
		// as param
		// also convertUnixDate while looping anyway
		let documentList = [];
		docList = docList.forEach(doc => {
			if (doc.subCategory === subCategory) {
				doc.uploadedDate = convertUnixDate(doc.uploadedDate);
				documentList.push(doc);
			}
		});
		var gridOptions = {
			dataBound: this.commonShowDocsAfterGridLoad,
		}
		createKendoGrid(tableId, columns, documentList, null, gridOptions);
		this.dom.body.find(tableId).kendoTooltip({
			filter: "td:nth-child(3)", // this filter selects the second
			// column's cells
			position: "right",
			content: (e) => {
				var dataItem = this.dom.body.find(tableId).data("kendoGrid").dataItem(e.target.closest("tr"));
				var content = dataItem.documentSize === "N/A" ? "N/A" : dataItem.documentSize + " Bytes";
				return content;
			}
		}).data("kendoTooltip");
		this.dom.body.find(tableId).parents(".documents-result").removeClass("hide");
	},


	getRfdsInserviceDocColumns: function() {
		return [{
			field: "action",
			title: "Action",
			width: 55,
			template: `<b class="k-delete-document text-brand-red vz-icon-delete fa fa-trash fa-bold-icon disable" id="#:documentID#"></b>`,
			filterable: false,
			attributes: {
				"class": "text-align-center"
			}
		}, {
			field: "title",
			title: "Documnet Name",
			template: (response) => {
				var vendorPath = `<a href="#" id="${response.documentID}" data-path="${response.path + "?" + new Date().getTime()}" class="text-underline text-link download-documents">${response.title}</a>`;
				var nonVendorPath = `<a href="${response.path + "?" + new Date().getTime()}" id="${response.documentID}" data-path="${response.path + "?" + new Date().getTime()}" class="text-underline text-link" target="_blank">${response.title}</a>`;
				if ($('#isVendorCheck').val() == "true") {
					return vendorPath;
				} else {
					return nonVendorPath;
				}
			}
		},
		{
			field: "documentSizeHuman",
			title: "Size"
		},
		{
			field: "category",	
			title: "Category"
		}, {
			field: "uploadedDate",
			title: "Upload Date",
			type: "date"
		}, {
			field: "uploadedBy",
			title: "Upload By"
		}];
	},
	changeFccRadio: function(e) {
		var self = $(e.currentTarget);
		var fccRequiredObject = {};
		var radioVal = self.val();
		var regService = self.data('reg-service');
		var selectedBandName = self.data('reg-service');
		fccRequiredObject.siteProjectsId = this.dom.projectId;
		var bandNames = ['700Mhz', 'Cellular', 'PCS', 'AWS', 'C-Band']

		if (radioVal === "Yes") {
			$("#"+selectedBandName+"-agreementTimeoutDiv").show();
			$("#"+selectedBandName+"-notificationTimeoutDiv").hide();

		} else if (radioVal === "No") {
			$("#"+selectedBandName+"-agreementTimeoutDiv").hide();	
			$("#"+selectedBandName+"-notificationTimeoutDiv").show();
		}



		for (var key = 0; key < bandNames.length; key++) {
			var value = bandNames[key];
			if (selectedBandName === value) {
				selectedBandName = selectedBandName === 'C-Band' ? 'CBand' : selectedBandName;
				fccRequiredObject['intlBorderExtendsFor' + selectedBandName] = radioVal
				fccRequiredObject.vzRegService = regService;
				this.updateRfdsCallSigns(fccRequiredObject);
				break;
			}
		}


	},
	changeUploadRfdsInserviceDocuments: function(e) {
		e.preventDefault();
		var form = this.dom.body.find('.rfds-inservice-template .upload-form');
		var formId = form.attr("id");
		var subCategory = this.dom.parent.find("#inservice-callsign-list").val();
		if (subCategory !== null && subCategory !== "" && subCategory !== undefined) {
			//    			this.dom.parent.find("#" + formId).find('#subCategory').val(subCategory);
			//    			this.dom.parent.find("#" + formId).find('#bandwidth').val(callSignFrequency[subCategory].replace(/-/g, "^"));
			//    			uploadDocument(this.dom.siteInfoId, formId, this.getRfdsInserviceDocuments);
			this.dom.parent.find("#" + formId).find('#subCategory').val(subCategory);
			this.dom.parent.find("#" + formId).find('#bandwidth').val(JSON.stringify(callSignFrequency));
			uploadDocumentWithMultipleCategories(this.dom.siteInfoId, formId, this.getRfdsInserviceDocuments, null, "Yes");
		} else {
			displayError("Error", "Please select the callsigns the document is applicable to");
			this.dom.parent.find("#" + formId)[0].reset();
		}
	},
	changeDocReportTypeList: function() {
		var reportTypeVal = this.dom.body.find("#doc-report-type-list").val();
		var reportTypeText = this.dom.body.find("#doc-report-type-list option:selected").text();
		if (reportTypeVal === "" && reportTypeVal === undefined) {
			displayError("Error", "Please select the Report Type !!");
			return false;
		}
		if (this.dom.body.find(".rfds-inservice-selected-block").find("." + reportTypeVal).length > 0) {
			displayError("Error", "Report type '" + reportTypeText + "' already added.!!");
			return false;
		}
		this.dom.body.find("#inservice-callsign-list").empty();
		if (reportTypeVal !== 'EXTENSION_AGREEMENT' && reportTypeVal !== "FIELD_STRENGTH" && reportTypeVal !== "CONTOUR_EXTENSION_BEYOND_40"
			&& reportTypeVal !== "5G_FIELD_STRENGTH" && reportTypeVal !== "CONTOUR_EXTENSION_INTO_UNLICENSED_AREA" && reportTypeVal !== "CBAND_FIELD_STRENGTH") {
			this.getProjCallSigns(reportTypeVal, (response) => {
				//this.dom.body.find("#inservice-callsign-list").append($("<option></option>").prop("value", "").text(""));
				if (!jQuery.isEmptyObject(response)) {
					$.each(response, (i, data) => {
						if (data !== null && data !== undefined) {
							this.dom.body.find("#inservice-callsign-list").append($("<option></option>").prop("value", i).text(data));
							this.dom.body.find("#inservice-callsign-list").selectpicker("refresh");
						}
					});
				} else {
					displayMessage("No CallSigns available");
					this.dom.body.find(".rfds-inservice-selected-block").empty();
					return false;
				}
			});
		} else {
			var carrierAgreements = getCarrierAgreements();
			this.getProjCallSigns("", (response) => {
				$.each(carrierAgreements, (i, data) => {
					if (data !== null && data !== undefined) {
						if (data.reportType === reportTypeVal && data.isReportRequired === "Yes") {
							//this.dom.body.find("#inservice-callsign-list").append($("<option></option>").prop("value", "").text(""));
							$.each((data.callSigns).split(","), (i, data) => {
								this.dom.body.find("#inservice-callsign-list").append($("<option></option>").prop("value", data).text(callSignFrequency[data]));
								this.dom.body.find("#inservice-callsign-list").selectpicker("refresh");
							});
						}
					}
				});
			});
		}
		var template = this.dom.body.find(".rfds-inservice-template").html();
		this.dom.body.find(".rfds-inservice-selected-block").empty();
		this.dom.body.find(".rfds-inservice-selected-block").append(
			template.replace(/@REPORT_TYPE_TEXT/g, reportTypeText)
				.replace(/@REPORT_TYPE_VAL/g, reportTypeVal)
				.replace(/@SITE_PROJECTS_ID/g, this.dom.projectId)
		);
		this.dom.body.find(".upload-rfds-inservice-documents").off('change').on('change', $.proxy(this.changeUploadRfdsInserviceDocuments, this));
	},
	changeCallsignListExtenstionAgreement: function() {
		var callsigns = this.dom.body.find("#callsign-list-CONTOUR_EXTENSION_BEYOND_40").val();
		if (callsigns === null) {
			displayError("Error", "Please select callsigns for CGSA border");
		}
	},
	clickCarrierAgreementsRadio: function(e) {
		var self = rfdsModule;
		var isReportRequired = $(e.currentTarget).val();
		var reportType = $(e.currentTarget).attr('name');
		self.mergeProjCarrierAgreementDetails(reportType, () => {
			if (reportType === "EXTENSION_AGREEMENT") {
				self.displayExtensionAgreement(reportType, isReportRequired)
			} else if (reportType === "CONTOUR_EXTENSION_BEYOND_40") {
				self.displayContourExtension(reportType, isReportRequired);
			} else {
				self.addCallSigns(reportType, isReportRequired, null, "CHANGE");
			}
		});
	},
	changeCarrierAgrmtCallsignList: function(e) {
		e.preventDefault();
		if ($(e.currentTarget).is('select')) {
			var id = $(e.currentTarget).attr('id');
			var reportType = id.replace(/callsign-list-/g, "");
			this.mergeProjCarrierAgreementDetails(reportType);
		}
	},
	changeBasMarket: function() {
		e.preventDefault();
		this.basMarketShow();
	},
	clickMitigationRadio: function(e) {
		let self = $(e.currentTarget);
		this.saveRfe(self.attr("name"), self.val(), "");
	},
	clickPowerAdjustmentRadio: function(e) {
		let self = $(e.currentTarget);
		if (self.val().toLowerCase() == 'no') {
			this.dom.body.find(".atoll-transmitter-section").addClass("hide");
			this.saveRfe("3RD_PARTY_EME_ASSESSEMENT", "", self.val());
			this.dom.body.find("#poweradjustment_yes").prop("checked", false);
		}
		else if (self.val().toLowerCase() == 'yes') {
			this.saveRfe("3RD_PARTY_EME_ASSESSEMENT", "", self.val());
			this.dom.body.find("#poweradjustment_no").prop("checked", false);
			this.getAtollTransmitterData();

		}
	},
	clickExistingMarketWithIn: function() {
		var value = this.dom.body.find("input[name='existingmarketwithin']").val();
		this.dom.body.find(".bas-doc-upload").addClass('hide');
		if (value === "Yes") {
			this.dom.body.find(".bas-doc-upload").removeClass('hide');
		}
	},
	changeRfeReportTypeList: function(msg) {
		var options = {
			title: 'CONFIRM NOTIFICATION',
			body: msg,
			confirmBtn: `<button type="submit" class="btn btn-sm btn-default pull-right make-rfe-yes-btn" data-dismiss="modal">Dismiss</button>`,
			backdrop: "static",
			keyboard: "false"
		};
		Fuzehelper.commonConfirmationModalPopup("make-rfe-rave-modal", options, () => {
			var makeRfeRaveModal = $("#make-rfe-rave-modal");
			makeRfeRaveModal.modal("show");
			makeRfeRaveModal.find('.make-rfe-yes-btn').off("click").on("click", () => {
				this.dom.body.find("#rfe-report-type-list").val("");
			});
		});
	},
	clickCreateRfdsWorkstep: function() {
		this.dom.body.find(".createRfdsLoading").addClass("fa-spinner fa-spin");
		var id = this.dom.body.find('.create-rfds-workstep').attr('id');
		var taskId = this.dom.body.find('.create-rfds-workstep').attr('role');
		var $this = this.dom.body.find('.create-rfds-workstep');
		var milestoneName = $this.closest('.panel .panel-default').attr('id');
		var proj = {};
		proj.siteProjectsId = this.dom.projectId;
		proj.source = "Projects";
		proj.siteInfoId = this.dom.siteInfoId;
		this.constructor.ajax.fireApi(proj, "rfds", "mergeRfdsProject", (response) => {
			this.listRfdsProjects();
			this.dom.body.find(".createRfdsLoading").removeClass("fa-spinner fa-spin");
			completeWorkStep(id, taskId, (response, siteProjectsId) => {
				populateWorkStepStatus(response, siteProjectsId, id, milestoneName);
			});
		});
	},
	clickAddRfeReportTypeBtn: function() {
		var reportTypeVal = this.dom.body.find("#rfe-report-type-list").val();
		var reportTypeText = this.dom.body.find("#rfe-report-type-list option:selected").text();
		var gridData = this.dom.body.find("#proj-rfe-document-table").data("kendoGrid") ? this.dom.body.find("#proj-rfe-document-table").data("kendoGrid").dataItems() : "";
		var reportType = gridData && gridData.length ? gridData[0].subCategory : "";

		if (reportTypeVal === "" || reportTypeVal === undefined) {
			displayError("Error", "Please select the Report Type !!");
			return false;
		}
		if (this.dom.body.find(".rfe-report-type-selected-block").find("." + reportTypeVal).length > 0) {
			displayError("Error", "Report type '" + reportTypeText + "' already added.!!");
			this.dom.body.find("#rfe-report-type-list").val("");
			return false;
		}
		if (reportType !== '' && reportType !== reportTypeVal) {
			displayError("Error", "Report type " + reportTypeText + " cannot be added as " + rfeReportType[reportType]
				+ " already exists.Please delete " + rfeReportType[reportType] + " document to add a new report !!!");
			this.dom.body.find("#rfe-report-type-list").val("");
			return false;
		}
		if (reportTypeVal === 'RAVE_SANDBOX') {
			let structureTypeList = ['Building Side-Mounted', 'Building with Mast/Pipe/Pole', 'Building with tower', 'In-Building System', 'Rooftop', 'In-building System']

			if (structureTypeList.includes(structureType)) {
				let fullMsg;
				var msg = "RAVE is not an acceptable RFE Report Type for the following structure types."
				let createList = '<ul>';
				structureTypeList.forEach(item => {
					createList = createList + `<li>${item}</li>`;
				});
				fullMsg = msg + createList + '</ul>' + "Please review the " + '<a href="https://fuze.verizon.com/regulatory-doc-mngmt/#/documentInfo/?regDocMngmtId=472" target="_blank">RFE Compliance Analysis Policy</a>' + " to determine the appropriate RFE report per structure type."

				displayError("Error", fullMsg);
				this.dom.body.find("#rfe-report-type-list").val("");
				return false;
			}
		}

		if (reportTypeVal === "RAVE") {
			if (!this.dom.raveValidation) {
				var msg = "To upload a RAVe report" +
					" please navigate to the RAVe module and ensure a project mode submission is created." +
					" RAVe reports generated in the RAVe module " + '<a href="/rave "target="_blank"">Rave</a>' + " will automatically appear in the SPM RFE task";
				this.changeRfeReportTypeList(msg);
				return;
			}
		}


		if (reportTypeVal === 'IBWAVE_ELECTROMAGNETIC_FIELD_REPORT') {
			if (!['In-Building System', 'In-building System'].includes(structureType)) {
				var msg = 'iBwave Electromagnetic Field Report is only acceptable for In-Building Systems. Please confirm your SPM Project structure type exactly = “In-Building System.”' +
					"If this is an in-building system, please update the project structure type. If this is not an in-building system, please perform an acceptable RFE analysis per structure type seen in the " + '<a href="https://fuze.verizon.com/regulatory-doc-mngmt/#/documentInfo/?regDocMngmtId=472" target="_blank">RFE Compliance Analysis Policy</a>'
				displayError("Error", msg);
				this.dom.body.find("#rfe-report-type-list").val("");
				return false;
			}

		}

		if (reportTypeVal === "3RD_PARTY_EME_ASSESSEMENT") {
			this.dom.body.find(".poweAdjustmentEme").removeClass("hide");
		} else {
			this.dom.body.find(".poweAdjustmentEme").addClass("hide");
		}
		this.dom.body.find(".rfe-report-type-selected-block").empty();
		var template = this.dom.body.find(".rfe-report-type-template").html();

		this.dom.body.find(".rfe-report-type-selected-block").append(
			template.replace(/@REPORT_TYPE_TEXT/g, reportTypeText)
				.replace(/@REPORT_TYPE_VAL/g, reportTypeVal)
				.replace(/@SITE_PROJECTS_ID/g, this.dom.body.find("#site-project-id").val())
		);
		if (reportTypeVal === "CANE_LETTER") {
			if (projectType == 'Initial Build') {
				var msg = 'CANE Letters are to be used for modification projects only. Initial Builds require an RFE analysis.'
				displayError("Error", msg);
				this.dom.body.find("#rfe-report-type-list").val("");
				this.dom.body.find(".rfe-report-type-selected-block").empty();
				return false;
			} else {
				this.dom.body.find("#CANE_LETTER_NO").prop('checked', true);
				this.dom.body.find("input[name='CANE_LETTER']").addClass('disable');
				this.saveRfe('CANE_LETTER', "No", "");
			}
		} else {
			this.saveRfe(reportTypeVal, "", "");
		}
	},

	isRfdsActive: function(callback) {
		var proj = {};
		proj.siteProjectsId = $("#site-project-id").val();
		proj.workStepName = "CREATE_RFDS";
		this.constructor.ajax.fireApi(proj, "rfds", "isRfdsActive", (response) => {
			if (callback) {
				callback(response);
			}
		});
	},
	atollTransmitterGrid: function(response, name) {
		var columns = [
			{
				field: "txRecordId",
				title: "Transmitter",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)"
			},
			{
				field: "azimuth",
				title: "Azimuth",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)"
			},
			//				{
			//					field: "antennaModel",
			//					title: "Antenna Model",
			//					width: 70,
			//					headerAttributes: {  style: "white-space: normal" },
			//					media: "(min-width: 768px)"
			//				},
			{
				field: "serviceType",
				title: "Band",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "rfds-cband-table"
			},
			{
				field: "mechanicalDowntilt",
				title: "MDT",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "atoll-transmitter-level-grid"
			},
			{
				field: "electricalDowntilt",
				title: "EDT",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "atoll-transmitter-level-grid"
			},
			{
				field: "centerChannel",
				title: "DLEARFCN",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "atoll-transmitter-level-grid"
			},
			{
				field: "channelBandwidth",
				title: "Channel Bandwidth (MHz)",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "atoll-transmitter-level-grid"
			},
			{
				field: "totalErp",
				title: "Total ERP (W)",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "atoll-transmitter-level-grid"
			},
			{
				field: "carrier",
				title: "Band Info",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "rfds-cband-table"
			},
			{
				field: "dlFrequency",
				title: "Center Frequency",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: name == "rfds-cband-table"
			},
			{
				field: "sectorName",
				title: "Sector Number",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)"
			},
			{
				field: "earthStationMaxPower",
				title: "Earth Station Max Power(dBm)",
				width: 70,
				attributes: {
					"class": "mandatory-field",
					id: "esPower"
				},
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				editor: function(container, options) {
					let input = $('<input type="Number"  class="k-input" name="' + options.field + '"/>');
					input.appendTo(container);
					input.kendoNumericTextBox({
						decimals: 1,
						restrictDecimals: true
					});
					input.kendoTooltip({
						content: '<p>The value entered must only be a number and <br>rounded down to the nearest tenth decimal place.</p>'
					});
				},
				hidden: name == "atoll-transmitter-level-grid"

			},
			{
				field: "maxPower",
				title: "Max Composite Transmitter Power (Watts)",
				headerAttributes: {
					"class": "text-bold"
				},
				attributes: {
					id: "emePower"
				},
				media: "(min-width: 768px)",
				editor: function(container, options) {
					let input = $('<input type="text"  class="k-input"  name="' + options.field + '"/>');
					input.appendTo(container);
				},
				hidden: name == "rfds-cband-table"

			},
			{
				field: "bandInfo",
				title: "Band Info",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				media: "(min-width: 768px)",
				hidden: true
			},
			{
				title: "Atoll Earth Station Data",
				width: 70,
				headerAttributes: { style: "white-space: normal" },
				template: kendo.template($("#atoll_earthstation_template").html()),
				media: "(max-width: 768px)",
				hidden: name == "atoll-transmitter-level-grid"
			},
			{
				title: "Atoll Transmitter Data",
				template: kendo.template($("#atoll_transmitter_template").html()),
				media: "(max-width: 767px)",
				hidden: name == "rfds-cband-table"
			}
		];
		var gridOptions = {
			scrollable: true,
			sortable: true,
			editable: true,
			autoBind: true,
			pageable: {
				refresh: true,
				pageSizes: [10, 20, 50, 100],
				buttonCount: 5
			},
			toolbar: ["excel"],
			excel: {
				allPages: true,
				fileName: $('#real-content a.breadcrumb-sitename').text() + "_" + this.dom.siteProjectsId + ".xlsx"
			},
			dataBound: function(e) {

			}
		};

		var dataSourceOptions = {
			pageSize: 10,
			excel: {
				allPages: true
			},
		};
		var schema = {
			model: {

				fields: {
					txRecordId: { editable: false },
					serviceType: { editable: false },
					carrier: { editable: false },
					dlFrequency: { editable: false },
					azimuth: { editable: false },
					antennaModel: { editable: false },
					sectorName: { editable: false },
					totalErp: { editable: false },
					channelBandwidth: { editable: false },
					electricalDowntilt: { editable: false },
					mechanicalDowntilt: { editable: false },
					centerChannel: { editable: false }
				}

			}

		};
		createKendoGrid('#' + name, columns, response, schema, gridOptions, dataSourceOptions)
	},



	mergeEarthStationMaxPower: function(callback) {
		if ($("#rfds-cband-table").data("kendoGrid")) {
			var gridrows = this.dom.body.find("#rfds-cband-table").data().kendoGrid.dataSource.data();
			var payload = [];
			gridrows.forEach((atollrow) => {
				atollrow.rfdsServiceInfoID = 0;
				atollrow.projID = 0;
				atollrow.siteInfoId = this.dom.siteInfoId;
				atollrow.siteProjectsId = this.dom.siteProjectsId;
				payload.push(atollrow);
			});
			this.constructor.ajax.fireApi(payload, "rfds-callsign", "mergeEarthStationMaxPower", (response) => {
				if (callback) {
					callback();
				}
			});
		}
	},
	saveEarthStationFields: function(callback) {
		var es_request = {};
		es_request.siteProjectsId = $("#site-project-id").val();
		es_request.cbEqType = $("#c-band-gNB-equipment-type").val();
		var esdma = $("#earth-station-design-mitigation-applied").val() != null ? $("#earth-station-design-mitigation-applied").val().toString() : "";
		var earth_station_agreement = $("#earth-station-agreement").is(":checked") ? 'true' : 'false';
		es_request.esdma = esdma;
		es_request.earth_station_agreement = earth_station_agreement;

		this.constructor.ajax.fireApi(es_request, "project", "saveEarthStationFields", (response) => {
			projectDetailsWrapper.projAdditionalInfo.cbEqType = es_request.cbEqType;
			projectDetailsWrapper.projAdditionalInfo.esdma = es_request.esdma;
			projectDetailsWrapper.projAdditionalInfo.earth_station_agreement = es_request.earth_station_agreement;
			if (callback) {
				callback(response);
			}
		});
	},

	getAtollTransmitterData: function() {
		let request = {};
		request.siteProjectsId = this.dom.projectId;
		request.siteInfoId = this.dom.siteInfoId;
		this.constructor.ajax.fireApi(request, "rfds", "getAtollTransmitterData", (response) => {
			this.dom.body.find(".atoll-transmitter-section").removeClass("hide");
			this.atollTransmitterGrid(response, "atoll-transmitter-level-grid");
		});

	},
	mergeMaxPowerRfds: function(callback) {
		var gridrows = this.dom.body.find("#atoll-transmitter-level-grid").data().kendoGrid.dataSource.data();
		var payload = [];
		gridrows.forEach((atollrow) => {
			atollrow.rfdsServiceInfoID = 0;
			atollrow.siteInfoId = this.dom.siteInfoId;
			atollrow.siteProjectsId = this.dom.siteProjectsId;
			payload.push(atollrow);
		});

		this.constructor.ajax.fireApi(payload, "rfds", "mergeMaxPowerRfds", (response) => {
			if (callback) {
				callback();
			}
		});
	},
	getMaxPowerFromTemplate: function(e) {
		let gridId = $(e).closest(".k-grid").attr('id');
		let grid = this.dom.body.find("#" + gridId).data("kendoGrid");
		let dataItem = grid.dataItem($(e).closest("tr"));
		if (gridId == "rfds-cband-table") {
			dataItem.set("earthStationMaxPower", parseInt($(e).val()));
		}

	},
	importAtollTransmitterData: function(e) {
		var form = document.getElementById("atollTransmitterImportForm");
		var file = form['file'].files[0];
		var fileName = form.elements["file"].value;
		var fileExtension = fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase();
		var jsonObj = [];
		let flag = true


		if (file && (fileExtension == "xlsx")) {
			let workbook = new kendo.spreadsheet.Workbook({});
			workbook.fromFile(file).then(function() {
				let jsonContent = workbook.toJSON();
				let headers = [];
				$.each(jsonContent.sheets[0].rows[0].cells, (i, column) => {
					if (column.value == 'Transmitter') {
						column = 'txRecordId';
					} else if (column.value == 'Azimuth') {
						column = 'azimuth';
					} else if (column.value == 'Band') {
						column = 'serviceType';
					} else if (column.value == 'Band Info') {
						column = 'carrier';
					} else if (column.value == 'Center Frequency') {
						column = 'dlFrequency';
					} else if (column.value == 'Sector Number') {
						column = 'sectorName';
					} else if (column.value == 'Max Power(Watt)') {
						column = 'maxPower';
					}
					headers.push(column);
				});
				headers.push('earthStationMaxPower');
				headers.push('bandInfo');
				let gridData = $("#atoll-transmitter-level-grid").data("kendoGrid").dataSource.data();
				if (jsonContent.sheets[0].rows.slice(1).length == gridData.length) {
					$.each(jsonContent.sheets[0].rows.slice(1), (i, row) => {
						let obj = {};
						let k = 0;
						let exist = 0;
						do {
							let object = {};
							exist = row.cells.filter(item => item.index == k).length;
							if (exist == 0) {
								object.value = '';
								object.index = k;
								row.cells.push(object);
							}
							k++;
						} while (k != 9);
						$.each(row.cells, (j, cell) => {
							let key = cell.index;
							if (headers[key] == 'bandInfo') {
								cell.value = gridData[i][headers[key]];
							}
							if (headers[key] != 'maxPower' && headers[key] != 'earthStationMaxPower' && headers[key] != 'bandInfo' && cell.value != gridData[i][headers[key]]) {
								flag = false;
								return false;
							}
							obj[headers[key]] = cell.value;
						});
						jsonObj.push(obj);
					});
				} else {
					flag = false;
				}
				if (flag == false) {
					$("#excelfile").val('');
					displayMessage('Imported data do not match with Grid data.');
				} else {
					rfdsModule.atollTransmitterGrid(jsonObj, "atoll-transmitter-level-grid");
					$("#excelfile").val('');
				}
			});
		}
	},
	displayInflightProjectBanner: function() {
		var siteInfo = {};
		siteInfo.siteInfoId = this.dom.siteInfoId;
		this.constructor.ajax.fireApi(siteInfo, "site", "getInFlightProjectsBySiteInfoId", (response) => {
			if (response.indexOf(this.dom.projectId) > -1) {
				response.splice(response.indexOf(this.dom.projectId), 1);
			}
			if (response.length > 0) {
				var bannermessage = "The following projects are in-flight and may change the RFE mitigation requirements for this site:" + response;
				this.dom.body.find("#sc-rfe-warning_banner").find("span").text(bannermessage);
				this.dom.body.find("#sc-rfe-warning_banner").removeClass("hide");
			}
		});
	},
	getStructureInfo: function() {
		let payload = {}
		payload.siteProjectsId = this.dom.siteProjectsId;
		this.constructor.ajax.fireApi(payload, "project", "getProjStructure", function(response) {
			if (response) {
				structureType = response.structureType
			}
		});
	},
	setInServiceOtherInfo: function() {
		var msg = '';
		var dynamicList = mileStoneFinalize.uploadInserviceDocValidateModule(false, true);
		$.each(dynamicList, function(i, dynamicMsg) {
			msg = msg.concat(dynamicMsg).concat('<br/>');
		});
		sideScreenModule.populateSSOtherInfo(sideScreenModule.dom.body.find(".ss-other-info-container"), sideScreenModule.dom.inServiceOtherInfo + '<br/>' + msg);
	}
};
$(function() {
	rfdsModule.postProcess();
});

//# sourceURL=rfds.js
