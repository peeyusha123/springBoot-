package com.yourpackage.controller;

import com.yourpackage.model.User;
import com.yourpackage.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/add")
    public ResponseEntity<String> addUser(@RequestBody User user) {
        try {
            userService.addUser(user);
            return new ResponseEntity<>("User added successfully", HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to add user: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/reset-username/{userId}")
    public ResponseEntity<String> resetUsername(@PathVariable Long userId, @RequestParam String newUsername) {
        try {
            userService.resetUsername(userId, newUsername);
            return new ResponseEntity<>("Username reset successfully", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to reset username: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/validate-login")
    public ResponseEntity<?> validateLogin(@RequestParam String username, @RequestParam String password) {
        try {
            String sessionToken = userService.validateLogin(username, password);
            if (sessionToken != null) {
                return new ResponseEntity<>(sessionToken, HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Invalid login credentials", HttpStatus.UNAUTHORIZED);
            }
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to validate login: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}


package com.yourpackage.dao;

import com.yourpackage.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class UserDao {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public UserDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void addUser(User user) {
        String sql = "INSERT INTO your_user_table (username, password) VALUES (?, ?)";
        jdbcTemplate.update(sql, user.getUsername(), user.getPassword());
    }

    public void resetUsername(Long userId, String newUsername) {
        String sql = "UPDATE your_user_table SET username = ? WHERE user_id = ?";
        jdbcTemplate.update(sql, newUsername, userId);
    }

    public User getUserByUsername(String username) {
        String sql = "SELECT * FROM your_user_table WHERE username = ?";
        return jdbcTemplate.queryForObject(sql, this::mapUser, username);
    }

    private User mapUser(ResultSet rs, int rowNum) throws SQLException {
        User user = new User();
        user.setUserId(rs.getLong("user_id"));
        user.setUsername(rs.getString("username"));
        user.setPassword(rs.getString("password"));
        return user;
    }

    // Add more methods as needed for your application
}




package com.yourpackage;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}



package com.yourpackage.service;

import com.yourpackage.dao.UserDao;
import com.yourpackage.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    private final UserDao userDao;

    @Autowired
    public UserService(UserDao userDao) {
        this.userDao = userDao;
    }

    public void addUser(User user) {
        // Add any business logic or validation before adding the user if needed
        userDao.addUser(user);
    }

    public void resetUsername(Long userId, String newUsername) {
        // Add any business logic or validation before resetting the username if needed
        userDao.resetUsername(userId, newUsername);
    }

    public String validateLogin(String username, String password) {
        User user = userDao.getUserByUsername(username);

        if (user != null && user.getPassword().equals(password)) {
            // Generate and return a session token
            return generateSessionToken(user);
        } else {
            return null; // Invalid login credentials
        }
    }

    // Add any additional methods or business logic as needed

    private String generateSessionToken(User user) {
        // Add your session token generation logic here
        // For example, you can use JWT or any other mechanism
        // For simplicity, let's assume the user's ID is the session token
        return String.valueOf(user.getUserId());
    }
}




package com.yourpackage.dao;

import com.yourpackage.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class UserDao {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public UserDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void addUser(User user) {
        String sql = "INSERT INTO your_user_table (username, password) VALUES (?, ?)";
        jdbcTemplate.update(sql, user.getUsername(), user.getPassword());
    }

    public void resetUsername(Long userId, String newUsername) {
        String sql = "UPDATE your_user_table SET username = ? WHERE user_id = ?";
        jdbcTemplate.update(sql, newUsername, userId);
    }

    public User getUserByUsername(String username) {
        String sql = "SELECT * FROM your_user_table WHERE username = ?";
        return jdbcTemplate.queryForObject(sql, this::mapUser, username);
    }

    private User mapUser(ResultSet rs, int rowNum) throws SQLException {
        User user = new User();
        user.setUserId(rs.getLong("user_id"));
        user.setUsername(rs.getString("username"));
        user.setPassword(rs.getString("password"));
        return user;
    }

    // Add more methods as needed for your application
}