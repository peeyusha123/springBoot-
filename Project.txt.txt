
package com.yourpackage.controller;

import com.yourpackage.model.User;
import com.yourpackage.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/user")
public class UserController {

    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/add")
    public ResponseEntity<String> addUser(@RequestBody User user) {
        try {
            userService.addUser(user);
            return new ResponseEntity<>("User added successfully", HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to add user: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/reset-username/{userId}")
    public ResponseEntity<String> resetUsername(@PathVariable Long userId, @RequestParam String newUsername) {
        try {
            userService.resetUsername(userId, newUsername);
            return new ResponseEntity<>("Username reset successfully", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to reset username: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/validate-login")
    public ResponseEntity<?> validateLogin(@RequestParam String username, @RequestParam String password) {
        try {
            String sessionToken = userService.validateLogin(username, password);
            if (sessionToken != null) {
                return new ResponseEntity<>(sessionToken, HttpStatus.OK);
            } else {
                return new ResponseEntity<>("Invalid login credentials", HttpStatus.UNAUTHORIZED);
            }
        } catch (Exception e) {
            return new ResponseEntity<>("Failed to validate login: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}


package com.yourpackage.dao;

import com.yourpackage.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class UserDao {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public UserDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void addUser(User user) {
        String sql = "INSERT INTO your_user_table (username, password) VALUES (?, ?)";
        jdbcTemplate.update(sql, user.getUsername(), user.getPassword());
    }

    public void resetUsername(Long userId, String newUsername) {
        String sql = "UPDATE your_user_table SET username = ? WHERE user_id = ?";
        jdbcTemplate.update(sql, newUsername, userId);
    }

    public User getUserByUsername(String username) {
        String sql = "SELECT * FROM your_user_table WHERE username = ?";
        return jdbcTemplate.queryForObject(sql, this::mapUser, username);
    }

    private User mapUser(ResultSet rs, int rowNum) throws SQLException {
        User user = new User();
        user.setUserId(rs.getLong("user_id"));
        user.setUsername(rs.getString("username"));
        user.setPassword(rs.getString("password"));
        return user;
    }

    // Add more methods as needed for your application
}




package com.yourpackage;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}



package com.yourpackage.service;

import com.yourpackage.dao.UserDao;
import com.yourpackage.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {

    private final UserDao userDao;

    @Autowired
    public UserService(UserDao userDao) {
        this.userDao = userDao;
    }

    public void addUser(User user) {
        // Add any business logic or validation before adding the user if needed
        userDao.addUser(user);
    }

    public void resetUsername(Long userId, String newUsername) {
        // Add any business logic or validation before resetting the username if needed
        userDao.resetUsername(userId, newUsername);
    }

    public String validateLogin(String username, String password) {
        User user = userDao.getUserByUsername(username);

        if (user != null && user.getPassword().equals(password)) {
            // Generate and return a session token
            return generateSessionToken(user);
        } else {
            return null; // Invalid login credentials
        }
    }

    // Add any additional methods or business logic as needed

    private String generateSessionToken(User user) {
        // Add your session token generation logic here
        // For example, you can use JWT or any other mechanism
        // For simplicity, let's assume the user's ID is the session token
        return String.valueOf(user.getUserId());
    }
}




package com.yourpackage.dao;

import com.yourpackage.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

@Repository
public class UserDao {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public UserDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    public void addUser(User user) {
        String sql = "INSERT INTO your_user_table (username, password) VALUES (?, ?)";
        jdbcTemplate.update(sql, user.getUsername(), user.getPassword());
    }

    public void resetUsername(Long userId, String newUsername) {
        String sql = "UPDATE your_user_table SET username = ? WHERE user_id = ?";
        jdbcTemplate.update(sql, newUsername, userId);
    }

    public User getUserByUsername(String username) {
        String sql = "SELECT * FROM your_user_table WHERE username = ?";
        return jdbcTemplate.queryForObject(sql, this::mapUser, username);
    }

    private User mapUser(ResultSet rs, int rowNum) throws SQLException {
        User user = new User();
        user.setUserId(rs.getLong("user_id"));
        user.setUsername(rs.getString("username"));
        user.setPassword(rs.getString("password"));
        return user;
    }

    // Add more methods as needed for your application
}





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.yourpackage</groupId>
    <artifactId>your-project-name</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>11</java.version>
        <spring-boot.version>2.6.3</spring-boot.version>
        <ojdbc.version>19.8.0.0</ojdbc.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter Web for building web applications -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter Data JDBC for simplified JDBC operations -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jdbc</artifactId>
        </dependency>

        <!-- Oracle JDBC Driver -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>${ojdbc.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin for building and running the application -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>


//application.properties


# DataSource Configuration
spring.datasource.url=jdbc:oracle:thin:@fuze-offshore-oracle-dit.csa9auzq3toz.us-east-1.rds.amazonaws.com:1521:fuze
spring.datasource.username=fuze
spring.datasource.password=Fuzedevoct!2020#
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver

# C3P0 Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.idle-timeout=1800
spring.datasource.hikari.max-lifetime=7200
spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL

# JPA Configuration
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update

# Fuze DB Configuration
DataServiceAdapterType=oracle
boot.datasource_pool=jdbc/fuze_oracle_ds
boot_datasource_pool_driver_class=oracle.jdbc.driver.OracleDriver
boot_datasource_pool_url=jdbc:oracle:thin:@fuze-offshore-oracle-dit.csa9auzq3toz.us-east-1.rds.amazonaws.com:1521:fuze
boot_datasource_pool_user=fuze
boot_datasource_pool_passwd=Fuzedevoct!2020#
C3P0_MAX_IDLE_TIME=1800
C3P0_MAX_CONNECTION_AGE=7200
C3P0_MAX_STATEMENTS_PER_CONNECTION=100
ESPRESSO_MODE=DEV


//user.java

package com.yourpackage.model;

public class User {

    private Long userId;
    private String username;
    private String password;

    // Default constructor
    public User() {
    }

    // Parameterized constructor
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    // Getter and Setter methods

    public Long getUserId() {
        return userId;
    }

    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // toString method for logging or debugging

    @Override
    public String toString() {
        return "User{" +
                "userId=" + userId +
                ", username='" + username + '\'' +
                ", password='" + password + '\'' +
                '}';
    }
}



updated...

# Fuze DB Configuration
DataServiceAdapterType=oracle
boot.datasource_pool=jdbc/fuze_oracle_ds
boot.datasource_pool_driver_class=oracle.jdbc.driver.OracleDriver
boot.datasource_pool_url=jdbc:oracle:thin:@fuze-offshore-oracle-dit.csa9auzq3toz.us-east-1.rds.amazonaws.com:1521:fuze
boot.datasource_pool_user=fuze
boot.datasource_pool_passwd=Fuzedevoct!2020#
C3P0_MAX_IDLE_TIME=1800
C3P0_MAX_CONNECTION_AGE=7200
C3P0_MAX_STATEMENTS_PER_CONNECTION=100
ESPRESSO_MODE=DEV
